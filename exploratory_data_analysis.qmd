# Exploratory Data Analysis

```{r import data}
# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(ggcorrplot) 
library(GGally) 
library(readr)
library(dplyr)
library(lubridate)
library(sf)

# Read the dataset
data <- readRDS("dataset/nypd_shooting_clean.rds")

# Display the first few rows of the dataset
head(data)


```

```{r}
# Display summary statistics
summary(data)

```

```{r}

# Convert 'OCCUR_DATE' to datetime format
data <- data %>%
  mutate(OCCUR_DATE = dmy(OCCUR_DATE), 
         OCCUR_YEAR = year(OCCUR_DATE))

```
```{r}
NYPD_arrest_data <- readRDS("dataset/nypd_arrest.rds")
combined_df <- merge(data, NYPD_arrest_data, by = c("X_COORD_CD", "Y_COORD_CD","Latitude","Longitude","PERP_SEX","JURISDICTION_CODE","PERP_RACE"))
```

```{r}
# Geographical Heatmap: Concentration of shootings in different boroughs
borough_counts <- data %>%
  count(BORO) %>%
  arrange(desc(n))

ggplot(borough_counts, aes(x = reorder(BORO, n), y = n, fill = BORO)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = 'Number of Shootings by Borough', x = 'Borough', y = 'Number of Shootings') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

```{r}
# Perpetrator and Victim Demographics: Age Group Distribution
perp_age_counts <- data %>%
  count(PERP_AGE_GROUP) %>%
  arrange(desc(n))

vic_age_counts <- data %>%
  count(VIC_AGE_GROUP) %>%
  arrange(desc(n))

# Plotting Perpetrator Age Group Distribution
ggplot(perp_age_counts, aes(x = reorder(PERP_AGE_GROUP, n), y = n, fill = PERP_AGE_GROUP)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = 'Perpetrator Age Group Distribution', x = 'Age Group', y = 'Count') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

```{r}
# Plotting Victim Age Group Distribution
ggplot(vic_age_counts, aes(x = reorder(VIC_AGE_GROUP, n), y = n, fill = VIC_AGE_GROUP)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = 'Victim Age Group Distribution', x = 'Age Group', y = 'Count') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r correlation matrix}

# Ensure we're working with the numeric part of the dataset
numeric_data <- data %>% 
  select_if(is.numeric)

# Compute the correlation matrix, handling NA values by computing correlations for complete pairs
cor_matrix <- cor(numeric_data, use = "pairwise.complete.obs")

# Plot the correlation matrix using ggcorrplot
ggcorrplot(cor_matrix, method = "circle", type = "lower", 
           lab = TRUE, lab_size = 3, tl.cex = 10, tl.col = "black",
           title = "Correlation Matrix of Numeric Variables")


```

```{r plots}
# STILL WORKING ON IT
# ggplot(data, aes(x = variable1, y = variable2)) +
#   geom_point() +
#   theme_minimal() +
#   labs(title = "Scatter Plot of variable1 vs. variable2",
#        x = "variable1",
#        y = "variable2")

```

```{r histogram}
# STILL WORKING ON IT
# ggplot(data, aes(x = variable)) +
#   geom_histogram(bins = 30, fill = "blue", color = "black") +
#   theme_minimal() +
#   labs(title = "Histogram of variable",
#        x = "variable",
#        y = "Frequency")

```

```{r regression}
# STILL WORKING ON IT
# # Linear regression model 
# lm_model <- lm(variable1 ~ variable2, data = data)
# 
# # Summarize the model
# summary(lm_model)

```

```{r}
prep_race_counts <- data |>
  count(PERP_RACE) |>
  arrange(desc(n))

ggplot(prep_race_counts, aes(x = reorder(PERP_RACE, n), y = n, fill = PERP_RACE)) + 
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Perpetrator Race Distribution", x = "Perpetrator Race", y = "Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
vic_race_counts <- data |>
  count(VIC_RACE) |>
  arrange(desc(n))

ggplot(vic_race_counts, aes(x = reorder(VIC_RACE, n), y = n, fill = VIC_RACE)) + 
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Victim Race Distribution", x = "Victim Race", y = "Count") +
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))
```

```{r}
# Calculate proportions Blog Post 4
proportions <- data %>%
  group_by(PERP_RACE) %>%
  summarise(Proportion = mean(STATISTICAL_MURDER_FLAG == "TRUE", na.rm = TRUE))

# Create the plot
ggplot(proportions, aes(x = PERP_RACE, y = Proportion, fill = PERP_RACE)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Proportion of Incidents Classified as Statistical Murders by Perpetrator Race",
       x = "Perpetrator Race",
       y = "Proportion") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
```{r}
mod1 <- glm(
  STATISTICAL_MURDER_FLAG ~ PERP_RACE + PERP_AGE_GROUP + PERP_SEX,
  data = data, 
  family = "binomial"
)

summary(mod1)
plot(mod1)
```

```{r}
library(caret)
library(nnet)
str(data)
```

```{r}
data$PERP_RACE <- as.factor(data$PERP_RACE)
data$PERP_AGE_GROUP <- as.factor(data$PERP_AGE_GROUP)
data$PERP_SEX <- as.factor(data$PERP_SEX)
data$STATISTICAL_MURDER_FLAG <- as.factor(data$STATISTICAL_MURDER_FLAG)
```

```{r}
# Fit the logistic regression model
model <- glm(STATISTICAL_MURDER_FLAG ~ PERP_RACE + PERP_AGE_GROUP + PERP_SEX, data = data, family = "binomial")

# Summarize the model
summary(model)
```

```{r}
library(pROC)

# Predict probabilities
predictions <- predict(model, type = "response")

# ROC curve
roc_curve <- roc(data$STATISTICAL_MURDER_FLAG, predictions)
plot(roc_curve)
auc(roc_curve)
```


```{r}
shapefile_path <- "tl_2022_36_tract/tl_2022_36_tract.shp"
complete_data <- st_read(shapefile_path)

map_df <- st_as_sf(combined_df, coords = c("Longitude", "Latitude"), crs = 4326, agr = "constant")

# Filter tracts for only New York City boroughs by their county FIPS codes
nyc_tracts <- complete_data %>% 
  filter(COUNTYFP %in% c("005", "047", "061", "081", "085"))

# Plotting the shapefile for NYC tracts and overlaying points
final_plot <- ggplot() +
  geom_sf(data = nyc_tracts, fill = "white", color = "gray") +
  geom_sf(data = map_df, color = "red", size = 1, alpha = 0.5) +  # Adds the points
  theme_minimal() +
  labs(title = "Map of New York City with Offense Data Points", x = "Longitude", y = "Latitude")

# Print the final plot
print(final_plot)
```


```{r}
# explores relationships between perpetrator and victim demographics
# Compare perpetrator and victim age groups
ggplot(combined_df, aes(x = PERP_AGE_GROUP, fill = VIC_AGE_GROUP)) +
  geom_bar(position = "dodge") +
  labs(x = "Perpetrator Age Group", y = "Count", fill = "Victim Age Group") +
  theme_minimal() +
  ggtitle("Comparison of Perpetrator and Victim Age Groups")

# Analyzing race and gender impact
ggplot(combined_df, aes(x = PERP_RACE, fill = VIC_SEX)) +
  geom_bar(position = "stack") +
  labs(x = "Perpetrator Race", y = "Count", fill = "Victim Sex") +
  theme_minimal() +
  ggtitle("Impact of Perpetrator Race on Victim Sex") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
# offense and Perpetrator race correlation
combined_df |>
  group_by(OFNS_DESC) |>
  summarise(Count = n(), .groups = 'drop') |>
  filter(Count >= 50) |>
  ggplot(aes(x = OFNS_DESC, y = Count, fill = OFNS_DESC)) +
  geom_bar(stat = "identity", position = "dodge") +
  coord_flip() +
  theme_minimal() +
  labs(x = "Offense Description", y = "Count") +
  guides(fill = FALSE)

combined_df |>
  group_by(OFNS_DESC, PERP_RACE) |>
  summarise(Count = n(), .groups = 'drop') |>
  filter(Count >= 10) |>
  ggplot(aes(x = OFNS_DESC, y = Count, fill = PERP_RACE)) +
  geom_bar(stat = "identity", position = "dodge") +
  coord_flip() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
  theme_minimal() +
  labs(x = "Offense Description", y = "Count", fill = "Perpetrator Race")
```


